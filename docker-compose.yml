name: ecommerce
networks:
    ecommerce_network:
        driver: bridge
services:
    mongo:
        build:
            dockerfile: .docker/mongo/Dockerfile
        container_name: ecommerce-db
        restart: unless-stopped
        environment:
            MONGO_INITDB_ROOT_USERNAME: $MONGO_USERNAME
            MONGO_INITDB_ROOT_PASSWORD: $MONGO_PASSWORD
        ports:
            - '${MONGO_PORT}:27017'
        command: --replSet rs0 --keyFile /etc/mongo-keyfile --bind_ip_all --port $MONGO_PORT
        healthcheck:
            test: echo "
                try { rs.status() }
                catch (err) {
                    rs.initiate({
                        _id:'rs0',
                        members:[
                            { _id:0, host:'127.0.0.1:27017' }
                        ]
                    })
                }" | mongosh --port $MONGO_PORT -u $MONGO_USERNAME -p $MONGO_PASSWORD --authenticationDatabase admin
            interval: 5s
            timeout: 15s
            start_period: 15s
            retries: 10
        networks:
            - ecommerce_network
        volumes:
            - ecommerce_db:/data/db
    redis:
        container_name: ecommerce-redis
        image: redis:alpine
        restart: unless-stopped
        ports:
            - '${REDIS_PORT}:6379'
        volumes:
            - redis_db:/data
        command: redis-server --save 20 1 --loglevel warning --requirepass $REDIS_PASSWORD
        networks:
            - ecommerce_network
volumes:
    ecommerce_db:
    redis_db:
